cmake_minimum_required (VERSION 3.18)
cmake_policy(VERSION 3.18)
project(build_tester)

enable_testing()
find_package(Iconv REQUIRED)

string(APPEND CMAKE_CXX_FLAGS " -Wall -Wextra -Wshadow -Wconversion -Wno-parentheses -Wno-unknown-pragmas -std=c++23")

add_executable(hrtn hrtn.cpp)
target_include_directories(hrtn PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(hrtn PRIVATE bux)
else()
target_link_libraries(hrtn PRIVATE bux stdc++)
endif()

add_executable(smoke_coutlog smoke_coutlog.cpp)
target_include_directories(smoke_coutlog PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(smoke_coutlog PRIVATE bux)
else()
target_link_libraries(smoke_coutlog PRIVATE bux stdc++)
endif()

add_executable(smoke_cerrlog smoke_cerrlog.cpp)
target_include_directories(smoke_cerrlog PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(smoke_cerrlog PRIVATE bux)
else()
target_link_libraries(smoke_cerrlog PRIVATE bux stdc++)
endif()

add_executable(smoke_ezargs smoke_ezargs.cpp)
target_include_directories(smoke_ezargs PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(smoke_ezargs PRIVATE bux)
else()
target_link_libraries(smoke_ezargs PRIVATE bux stdc++)
endif()

add_executable(smoke_filelog smoke_filelog.cpp)
target_include_directories(smoke_filelog PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(smoke_filelog PRIVATE bux)
else()
target_link_libraries(smoke_filelog PRIVATE bux stdc++)
endif()

add_executable(smoke_timelog smoke_timelog.cpp)
target_include_directories(smoke_timelog PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(smoke_timelog PRIVATE bux )
else()
target_link_libraries(smoke_timelog PRIVATE bux stdc++)
endif()

add_executable(smoke_paralog smoke_paralog.cpp)
target_include_directories(smoke_paralog PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(smoke_paralog PRIVATE bux)
else()
target_link_libraries(smoke_paralog PRIVATE bux stdc++ pthread curses)
endif()

add_executable(smoke_filtlog smoke_filtlog.cpp)
target_include_directories(smoke_filtlog PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(smoke_filtlog PRIVATE bux)
else()
target_link_libraries(smoke_filtlog PRIVATE bux stdc++)
endif()

add_executable(smoke_timestamp smoke_timestamp.cpp)
target_include_directories(smoke_timestamp PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(smoke_timestamp PRIVATE bux )
else()
target_link_libraries(smoke_timestamp PRIVATE bux stdc++)
endif()

if(NOT APPLE)
add_executable(test_expand_env test_expand_env.cpp)
#target_compile_options(test_expand_env PUBLIC -D_GLIBCXX_USE_CXX11_ABI=1)
target_include_directories(test_expand_env PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(test_expand_env PRIVATE bux)
else()
target_link_libraries(test_expand_env PRIVATE bux stdc++)
endif()

add_test(NAME test_home
         COMMAND test_expand_env home
         )
set_tests_properties(test_home PROPERTIES PASS_REGULAR_EXPRESSION "$ENV{HOME}")

add_test(NAME test_pass_str
         COMMAND test_expand_env in test_in.txt
         )
set_tests_properties(test_pass_str PROPERTIES PASS_REGULAR_EXPRESSION "XYZ-$ENV{USER}")

add_test(NAME test_pass_env
         COMMAND test_expand_env env "USER"
         )
set_tests_properties(test_pass_env PROPERTIES PASS_REGULAR_EXPRESSION "$ENV{USER}")
endif()

find_package(Catch2 REQUIRED)
include(Catch)

add_executable(test_PO test_PO.cpp)
target_include_directories(test_PO PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(test_PO PRIVATE bux Catch2::Catch2WithMain)
else()
target_link_libraries(test_PO PRIVATE bux Catch2::Catch2WithMain stdc++ m)
endif()
catch_discover_tests(test_PO)
add_test(NAME test_PO_All COMMAND test_PO)

add_executable(test_atomix test_atomix.cpp)
target_include_directories(test_atomix PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(test_atomix PRIVATE bux Catch2::Catch2WithMain)
else()
target_link_libraries(test_atomix PRIVATE bux Catch2::Catch2WithMain stdc++ m)
endif()
add_test(NAME test_atomix_All COMMAND test_atomix)

add_executable(test_ezargs test_ezargs.cpp)
target_include_directories(test_ezargs PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(test_ezargs PRIVATE bux Catch2::Catch2WithMain)
else()
target_link_libraries(test_ezargs PRIVATE bux Catch2::Catch2WithMain stdc++ m)
endif()
add_test(NAME test_ezargs_All COMMAND test_ezargs)

add_executable(test_ezscape test_ezscape.cpp)
target_include_directories(test_ezscape PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(test_ezscape PRIVATE bux curl Catch2::Catch2WithMain)
else()
target_link_libraries(test_ezscape PRIVATE bux curl Catch2::Catch2WithMain stdc++ m)
endif()
add_test(NAME test_ezscape_All COMMAND test_ezscape)

add_executable(test_logger test_logger.cpp)
target_include_directories(test_logger PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(test_logger PRIVATE bux Catch2::Catch2WithMain)
else()
target_link_libraries(test_logger PRIVATE bux Catch2::Catch2WithMain stdc++ m pthread)
endif()
add_test(NAME test_logger_All COMMAND test_logger)

add_executable(test_paralog test_paralog.cpp)
target_include_directories(test_paralog PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(test_paralog PRIVATE bux Catch2::Catch2WithMain)
else()
target_link_libraries(test_paralog PRIVATE bux Catch2::Catch2WithMain stdc++ m pthread)
endif()
add_test(NAME test_paralog_All COMMAND test_paralog)

add_executable(test_unicodecvt test_unicodecvt.cpp)
target_include_directories(test_unicodecvt PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(test_unicodecvt PRIVATE bux Catch2::Catch2WithMain)
else()
target_link_libraries(test_unicodecvt PRIVATE bux Catch2::Catch2WithMain Iconv::Iconv stdc++ m)
endif()
add_test(NAME test_unicodecvt_All COMMAND test_unicodecvt)

add_executable(test_lexbase test_lexbase.cpp)
target_include_directories(test_lexbase PRIVATE ../include)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
target_link_libraries(test_lexbase PRIVATE bux Catch2::Catch2WithMain)
else()
target_link_libraries(test_lexbase PRIVATE bux Catch2::Catch2WithMain stdc++ m)
endif()
add_test(NAME test_lexbase_All COMMAND test_lexbase)
